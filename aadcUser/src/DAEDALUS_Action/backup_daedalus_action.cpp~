/**
Copyright (c) 
Audi Autonomous Driving Cup. All rights reserved. TEAM DAEDALUS
 
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 
1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3.  All advertising materials mentioning features or use of this software must display the following acknowledgement: �This product includes software developed by the Audi AG and its contributors for Audi Autonomous Driving Cup.�
4.  Neither the name of Audi nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY AUDI AG AND CONTRIBUTORS �AS IS� AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL AUDI AG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Summary:

1) Filter for performing action on the crossroads.

**********************************************************************
* $Author:: spiesra $  $Date:: 2015-05-13 08:29:07#$ $Rev:: 35003   $
* Updated By:: Amanullah Tariq 
**********************************************************************/

#include "stdafx.h"
#include "daedalus_action.h"
#include "daedalus_action_enums.h"

ADTF_FILTER_PLUGIN("DAEDALUS Action Filter", OID_ADTF_DaedalusActionFilter, cActionFilter)

/****************** Turn Left and Right Properties ***********************************/
#define AF_PROP_TURN_LEFT "Action Filter::Turn Left"
#define AF_PROP_TURN_LEFT_ANGLE "Action Filter::Turn Left Angle"
#define AF_PROP_TURN_RIGHT "Action Filter::Turn Right"
#define AF_PROP_TURN_RIGHT_ANGLE "Action Filter::Turn Right Angle"
#define AF_PROP_SPEED "Action Filter::Turn Speed"
#define AF_PROP_DF "Action Filter::Duration Forward"
#define AF_PROP_DURATION_TURNING "Action Filter::Duration Turning"
#define AF_STRAIGHT_ANGLE "Action:Straight Angle"
#define AF_INTERVAL_TIME "Action: Interval Time"

// define the ADTF property names to avoid errors 
#define AF_PROP_SHOW_LOG "Common::Show Log"

cActionFilter::cActionFilter(const tChar* __info) : adtf::cTimeTriggeredFilter(__info)
{

	/****************** Start of Debug ***************/
	SetPropertyBool(AF_PROP_SHOW_LOG,tTrue);
	SetPropertyStr(AF_PROP_SHOW_LOG NSSUBPROP_DESCRIPTION, "If true show log values");
	/***************** End of Debug *****************/

	/*************************Start Properties for Left and right turn of the car **********************************/

	SetPropertyBool(AF_PROP_TURN_LEFT, tFalse);
    SetPropertyStr(AF_PROP_TURN_LEFT NSSUBPROP_DESCRIPTION, "If true then car will turn left from the next crossroad");

	SetPropertyFloat(AF_PROP_TURN_LEFT_ANGLE,50.0);
	SetPropertyBool(AF_PROP_TURN_LEFT_ANGLE NSSUBPROP_ISCHANGEABLE,tTrue);
	SetPropertyStr(AF_PROP_TURN_LEFT_ANGLE NSSUBPROP_DESCRIPTION, "Angle for left turn");

	SetPropertyBool(AF_PROP_TURN_RIGHT,tFalse);
	SetPropertyStr(AF_PROP_TURN_RIGHT NSSUBPROP_DESCRIPTION,"If true then car will turn from the next crossroad"); 

	SetPropertyFloat(AF_PROP_TURN_RIGHT_ANGLE,130.0);
	SetPropertyBool(AF_PROP_TURN_RIGHT_ANGLE NSSUBPROP_ISCHANGEABLE,tTrue);
	SetPropertyStr(AF_PROP_TURN_RIGHT_ANGLE NSSUBPROP_DESCRIPTION, "Angle for right turn");

	/*************************End Properties for Left and right turn of the car **********************************/
      SetPropertyFloat(AF_STRAIGHT_ANGLE, 90.0); 
      SetPropertyFloat(AF_INTERVAL_TIME, 20000);   
	  SetPropertyFloat(AF_PROP_SPEED, 1.0);
	  SetPropertyFloat(AF_PROP_DF, 60);
	  SetPropertyFloat(AF_PROP_DURATION_TURNING, 90);
}

cActionFilter::~cActionFilter()
{
}

tResult cActionFilter::Init(tInitStage eStage, __exception)
{
    RETURN_IF_FAILED(cTimeTriggeredFilter::Init(eStage, __exception_ptr));

    if (eStage == StageFirst)
    {
		CreateInputPins(__exception_ptr);
		CreateOutputPins(__exception_ptr);
    }
    else if (eStage == StageNormal)
    {
		DriverNextAction = -1;
		DriverModuleBufferReaderFlag = tFalse;
		ReadProperties(NULL);
		counter_ = 0;
		active_ = true;

        RETURN_IF_FAILED(SetInterval(m_f32IntervalTime));

    }
    else if (eStage == StageGraphReady)
    {
    }

    RETURN_NOERROR;
}

tResult cActionFilter::Cycle(__exception)
{
	RunAction();
    RETURN_NOERROR;
}

tResult cActionFilter::OnPinEvent(IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample)
{
    
    RETURN_IF_POINTER_NULL(pMediaSample);
    RETURN_IF_POINTER_NULL(pSource);
    if(nEventCode == IPinEventSink::PE_MediaSampleReceived)
    {
        tTimeStamp InputTimeStamp;
        InputTimeStamp = pMediaSample->GetTime();
		
        if(pSource == &m_iDriverAction)
        {
            tUInt32 DriverActionTime = 0;
            tBool DriverIsProcessed = tFalse;
            {   // focus for sample read lock
                    __adtf_sample_read_lock_mediadescription(m_pDescriptionDecisionInput,pMediaSample,pCoderInput);       
                    if(!DriverModuleBufferReaderFlag)
                    {
                        pCoderInput->GetID("i32Value", DriverNextActionBuffer);
                        pCoderInput->GetID("ui32Timestamp",DriverTimeBuffer);
                        pCoderInput->GetID("bIsExecuted",DriverIsProcessedBuffer);
                        DriverModuleBufferReaderFlag = tTrue;
                    }  
                    // get the values from DriverNextAction
                    pCoderInput->Get(DriverNextActionBuffer, (tVoid*)&DriverNextAction);
                    pCoderInput->Get(DriverTimeBuffer, (tVoid*)&DriverActionTime);
                    pCoderInput->Get(DriverIsProcessedBuffer, (tVoid*)&DriverIsProcessed);       
			}
			active_ = true;
			if (m_bShowLog)   
			{
                    LOG_ERROR(cString::Format("Action Fiter: DriverModule Data: ID -> %d time: %d isProcessed: %d",DriverNextAction, DriverActionTime,DriverIsProcessed));
			}
        }
    }
        RETURN_NOERROR;
}

/************************* Custom Methods **********************************/
tResult cActionFilter::RunAction()
{
	if (!active_) RETURN_NOERROR;
	tFloat32 speed = GetPropertyFloat(AF_PROP_SPEED);
	tFloat32 DurationForward = GetPropertyFloat(AF_PROP_DF);
	tFloat32 DurationTurning = GetPropertyFloat(AF_PROP_DURATION_TURNING);

	if(DriverNextAction == Driver_straight)
	{
		RunStraightScript(1.0,60);
	}
	else if (DriverNextAction == Driver_left)
	{
		tFloat32 leftAngle = GetPropertyFloat(AF_PROP_TURN_LEFT_ANGLE);
		RunTurnLeftScript(1.0,20, 80,leftAngle);
		  
	}
	else if (DriverNextAction == Driver_right)
	{
		tFloat32 rightAngle = GetPropertyFloat(AF_PROP_TURN_RIGHT_ANGLE);
		RunTurnRightScript(0.5,230,rightAngle);
		  
	}
	else if(DriverNextAction == Driver_parallel_parking)
	{
		RunParallelParkingScript();
	}
	else if(DriverNextAction == Driver_cross_parking)
	{
		RunCrossParkingScript(1.0, 10,120,90.0);
	}
	else if(DriverNextAction == Driver_pull_out_left)
	{
		RunPullOverLeftScript();
	}
	else if(DriverNextAction == Driver_pull_out_right)
	{
		RunPullOverRightScript(-1.0, 90.0, 120, 40);
	}
  RETURN_NOERROR;
}

tResult cActionFilter::CreateInputPins(__exception)
{
	cObjectPtr<IMediaDescriptionManager> pDescManager;
	RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));

	 // Reading Action to perfrom
    tChar const * strDescIdValue = pDescManager->GetMediaDescription("tIdValue");    
    RETURN_IF_POINTER_NULL(strDescIdValue);
    cObjectPtr<IMediaType> pTypeIdValue = new cMediaType(0, 0, 0, "tIdValue", strDescIdValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);    
    
    RETURN_IF_FAILED(pTypeIdValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pDescriptionDecisionInput)); 
    RETURN_IF_FAILED(m_iDriverAction.Create("Action",pTypeIdValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_iDriverAction));
	

	RETURN_NOERROR;
}

tResult cActionFilter::CreateOutputPins(__exception)
{

	cObjectPtr<IMediaDescriptionManager> pDescManager;
    RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));

    // Media Description Signal Value
    tChar const * strDescSignalValue = pDescManager->GetMediaDescription("tSignalValue");
    RETURN_IF_POINTER_NULL(strDescSignalValue);        
    cObjectPtr<IMediaType> pTypeSignalValue = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);    
    RETURN_IF_FAILED(pTypeSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescSignal)); 
	
	// Media Description Signal Bool
	tChar const * strDescSignalBoolValue = pDescManager->GetMediaDescription("tBoolSignalValue");
    RETURN_IF_POINTER_NULL(strDescSignalBoolValue);
    cObjectPtr<IMediaType> pTypeSignalBoolValue = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescSignalBoolValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);    
    RETURN_IF_FAILED(pTypeSignalBoolValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescBool));


	   //Acceleration Output
    RETURN_IF_FAILED(m_oAccelerateOutputPin.Create("Acceleration", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_oAccelerateOutputPin));
    
    // Steer Angle Output pin
    RETURN_IF_FAILED(m_oSteerOutputPin.Create("Steering Angle", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_oSteerOutputPin));

	 // Left Indicator Output pin
    RETURN_IF_FAILED(m_oTurnSignalLeftOutputPin.Create("Left Indicator", pTypeSignalBoolValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_oTurnSignalLeftOutputPin));

	// Right Indicator Output Pin
    RETURN_IF_FAILED(m_oTurnSignalRightOutputPin.Create("Right Indicator", pTypeSignalBoolValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_oTurnSignalRightOutputPin));

	// Action Performed Output Pin
    RETURN_IF_FAILED(m_oActionPerformed.Create("Action Performed", pTypeSignalBoolValue, static_cast<IPinEventSink*> (this)));
    RETURN_IF_FAILED(RegisterPin(&m_oActionPerformed));


	RETURN_NOERROR;
}

tResult cActionFilter::ReadProperties(const tChar* strPropertyName)
{

	/********************* Properties for Left and right turn of the car **************************/

	// Cross Detection turn left properties
	if(NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_PROP_TURN_LEFT))
	{
		m_bTurnLeft = GetPropertyBool(AF_PROP_TURN_LEFT);
	}
	if( NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_PROP_TURN_LEFT_ANGLE))
	{
		m_f32TurnLeftAngle = static_cast<tFloat32> (GetPropertyFloat(AF_PROP_TURN_LEFT_ANGLE));
	}

	// Cross Detection turn right properties
	if(NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_PROP_TURN_RIGHT))
	{
		m_bTurnRight = GetPropertyBool(AF_PROP_TURN_RIGHT);
	}
	if( NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_PROP_TURN_RIGHT_ANGLE))
	{
		m_f32TurnRightAngle = static_cast<tFloat32> (GetPropertyFloat(AF_PROP_TURN_RIGHT_ANGLE));
	}

	/********************* Properties for Show Log **************************/
	if(NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_PROP_SHOW_LOG))
	{
		m_bShowLog = GetPropertyBool(AF_PROP_SHOW_LOG);
	}
    
    /********************* Properties for Straight Angle **************************/
	if(NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_STRAIGHT_ANGLE))
	{
		m_f32StraightAngle = GetPropertyFloat(AF_STRAIGHT_ANGLE);
	}
    
    if(NULL == strPropertyName || cString::IsEqual(strPropertyName,AF_INTERVAL_TIME))
	{
		m_f32IntervalTime = GetPropertyInt(AF_INTERVAL_TIME);
	}
    RETURN_NOERROR;
}

tResult cActionFilter::ProcessInput(IMediaSample* pSample, tTimeStamp tsInputTime)
{
    RETURN_NOERROR;            
}

tResult cActionFilter::TransmitAcceleration(tFloat32 f32Acceleration, tTimeStamp tsInputTime)
{
    __synchronized_obj(m_oTransmitAccelCritSection);

    //create new media sample
    cObjectPtr<IMediaSample> pSampleAccel;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pSampleAccel));

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescSignal->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    RETURN_IF_FAILED(pSampleAccel->AllocBuffer(nSize));
        
    {
          __adtf_sample_write_lock_mediadescription(m_pCoderDescSignal, pSampleAccel, pCoderOutput);
 
          pCoderOutput->Set("f32Value", (tVoid*)&f32Acceleration);    
          pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&m_tsArduinoTime);    
    }
          
     pSampleAccel->SetTime(tsInputTime);
     RETURN_IF_FAILED(m_oAccelerateOutputPin.Transmit(pSampleAccel));

     RETURN_NOERROR;
}

tResult cActionFilter::TransmitSteeringAngle(const tFloat32 f32SteeringAngle, tTimeStamp tsInputTime)
{
    __synchronized_obj(m_oTransmitSteerCritSection);
    
    /*static tFloat32 SteerLastTransmitted = 100.0;

    if (fabs(SteeringAngle - SteerLastTransmitted)< 0.00001f)
    {
        RETURN_NOERROR;
    }
    
    SteerLastTransmitted = SteeringAngle;*/
    
    //create new media sample
    cObjectPtr<IMediaSample> pNewMediaSample;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pNewMediaSample));

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescSignal->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    RETURN_IF_FAILED(pNewMediaSample->AllocBuffer(nSize));

    {
          __adtf_sample_write_lock_mediadescription(m_pCoderDescSignal, pNewMediaSample, pCoderOutput);    
 
          pCoderOutput->Set("f32Value", (tVoid*)&f32SteeringAngle);    
          pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&m_tsArduinoTime);    
    }
    
    pNewMediaSample->SetTime(tsInputTime);
    RETURN_IF_FAILED(m_oSteerOutputPin.Transmit(pNewMediaSample));

    //LOG_INFO(cString::Format("Sending SteeringAngle: %f", SteeringAngle).GetPtr());

    RETURN_NOERROR;
    
}

tResult cActionFilter::TransmitRightIndicator(const tBool bTurnRightIndicator, tTimeStamp tsInputTime)
{
    __synchronized_obj(m_oTransmitRightIndicatorCritSection);
    
    //create new media sample
    cObjectPtr<IMediaSample> pNewMediaSample;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pNewMediaSample));

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBool->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    RETURN_IF_FAILED(pNewMediaSample->AllocBuffer(nSize));

    {
          __adtf_sample_write_lock_mediadescription(m_pCoderDescBool, pNewMediaSample, pCoderOutput);    
 
          pCoderOutput->Set("bValue", (tVoid*)&bTurnRightIndicator);    
          pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&m_tsArduinoTime);    
    }
              
    pNewMediaSample->SetTime(tsInputTime);
    RETURN_IF_FAILED(m_oTurnSignalRightOutputPin.Transmit(pNewMediaSample));

    RETURN_NOERROR;
    
}

tResult cActionFilter::TransmitLeftIndicator(const tBool bTurnLeftIndicator, tTimeStamp tsInputTime)
{
    __synchronized_obj(m_oTransmitLeftIndicatorCritSection);
    
    //create new media sample
    cObjectPtr<IMediaSample> pNewMediaSample;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pNewMediaSample));

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBool->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    RETURN_IF_FAILED(pNewMediaSample->AllocBuffer(nSize));

    {
          __adtf_sample_write_lock_mediadescription(m_pCoderDescBool, pNewMediaSample, pCoderOutput);    
 
          pCoderOutput->Set("bValue", (tVoid*)&bTurnLeftIndicator);    
          pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&m_tsArduinoTime);    
    }
              
    pNewMediaSample->SetTime(tsInputTime);
    RETURN_IF_FAILED(m_oTurnSignalLeftOutputPin.Transmit(pNewMediaSample));

    RETURN_NOERROR;
    
}

tResult cActionFilter::TransmitActionPerformed()
{
	tBool bAction = tTrue;
	__synchronized_obj(m_oTransmitActionPerformedCritSection);
    
    //create new media sample
    cObjectPtr<IMediaSample> pNewMediaSample;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pNewMediaSample));

    //allocate memory with the size given by the descriptor
    cObjectPtr<IMediaSerializer> pSerializer;
    m_pCoderDescBool->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    RETURN_IF_FAILED(pNewMediaSample->AllocBuffer(nSize));

    {
          __adtf_sample_write_lock_mediadescription(m_pCoderDescBool, pNewMediaSample, pCoderOutput);    
 
          pCoderOutput->Set("bValue", (tVoid*)&bAction);    
          pCoderOutput->Set("ui32ArduinoTimestamp", (tVoid*)&m_tsArduinoTime);    
    }
              
    pNewMediaSample->SetTime(m_tsArduinoTime);
    RETURN_IF_FAILED(m_oActionPerformed.Transmit(pNewMediaSample));

    RETURN_NOERROR;
}

tVoid cActionFilter::RunTurnLeftScript(tFloat32 speed, tFloat32 durationForward, tFloat32 turningDuration, tFloat32 turningAngle)
{
	if(m_bShowLog)
	{
		LOG_ERROR(cString::Format("RunTurnLeftScript: Started"));
	}
	
	TransmitLeftIndicator(tTrue,m_tsArduinoTime);
	
	if (counter_ < durationForward)
	{
		if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunTurnLeftScript: Moving Straight"));
		}
		TransmitAcceleration(speed,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		counter_++;
	} 
	else if (counter_ < (durationForward + turningDuration ))
	{
		if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunTurnLeftScript: Moving Left"));
		}
		TransmitAcceleration(speed,m_tsArduinoTime);
		TransmitSteeringAngle(turningAngle,m_tsArduinoTime);
		counter_++;
	} 
	else 
	{
		TransmitLeftIndicator(tFalse,m_tsArduinoTime);
		TransmitAcceleration(0.0f,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		TransmitActionPerformed();
		counter_ = 0;
		active_ = false;
		if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunTurnLeftScript: Started"));
		}
	}
}

tVoid cActionFilter::RunTurnRightScript(float speed, float durationTurning, float turningAngle)
{
	if(m_bShowLog)
	{
		LOG_ERROR(cString::Format("RunTurnRightScript: Start"));
	}
	TransmitRightIndicator(tTrue,m_tsArduinoTime);
	tFloat32 angle = GetPropertyFloat(AF_PROP_TURN_RIGHT_ANGLE);
	 if (counter_ < 230 )
	 {
		 if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunTurnRightScript: Moving Right"));
		}
		 TransmitAcceleration(0.5,m_tsArduinoTime);
		 TransmitSteeringAngle(angle,m_tsArduinoTime);
		counter_++;
	 } 
	 else 
	 {
		  TransmitRightIndicator(tFalse,m_tsArduinoTime);
	      TransmitAcceleration(0.0f,m_tsArduinoTime);
		  TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		  TransmitActionPerformed();
		  counter_ = 0;
		  active_ = false;
		  if(m_bShowLog)
		  {
			  LOG_ERROR(cString::Format("RunTurnRightScript: Ended"));
		  }
	  }

}

tVoid cActionFilter::RunStraightScript(tFloat32 speed ,tFloat32 DurationForward)
{
	if(m_bShowLog)
	{
		LOG_ERROR(cString::Format("Action Fiter: In straight "));
	}
	if (counter_ < (DurationForward ))
	{
		TransmitAcceleration(speed,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		counter_++;
	 } 
     else 
     {
		 TransmitAcceleration(0.0f,m_tsArduinoTime);
		 TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		 counter_ = 0;
		 active_ = false;
	}
}

tVoid cActionFilter::RunCrossParkingScript(tFloat32 speed, tFloat32 durationForward , tFloat32 turningAngle, tFloat32 turningDuration)
{
	//ANGLE 0
	//SPEED 0
	//DELAY 2
	//RSIGN 1

	//ANGLE -5
	//SPEED 26
	//DELAY 2.2
	//ANGLE 30
	//#SPEED -30
	//SPEED -35
	//#DELAY 5
	//DELAY 3
	//ANGLE -5
	//SPEED -30
	//DELAY 0.1

	//RSIGN 0
	//SPEED 0
	//ANGLE 0
	//DELAY 0.1
	//HAZZA 1
	//DELAY 5
	//HAZZA 0
	TransmitRightIndicator(tTrue,m_tsArduinoTime);
	if(m_bShowLog)
	{
		LOG_ERROR(cString::Format("RunCrossParkingScript: Cross Parking Started"));
	}
	if (counter_ < durationForward )
	{
		TransmitAcceleration(0.6,m_tsArduinoTime);
		TransmitSteeringAngle(65.0,m_tsArduinoTime);
		counter_++;
	} 
	else if (counter_ < (durationForward + turningDuration + turningDuration) )
	{
		TransmitAcceleration(0.8,m_tsArduinoTime);
		TransmitSteeringAngle(60.0,m_tsArduinoTime);
		counter_++;
	}
	else if (counter_ < (durationForward + turningDuration + turningDuration + turningDuration) )
	{
		TransmitAcceleration(0.6,m_tsArduinoTime);
		TransmitSteeringAngle(70.0,m_tsArduinoTime);
		counter_++;
	}
	else 
	{
		TransmitAcceleration(0.0f,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		TransmitRightIndicator(tFalse,m_tsArduinoTime);
		counter_ = 0;
		active_ = false;
		if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunCrossParkingScript: Parallel Parking Ended"));
		}
	}
}

tVoid cActionFilter::RunPullOverRightScript(tFloat32 speed, tFloat32 durationBack, tFloat32 turningAngle,tFloat32 durationTurning)
{
	if(m_bShowLog)
	{
		LOG_ERROR(cString::Format("RunPullOverRightScript: Started"));
	}
	if (counter_ < durationBack )
	{
		TransmitAcceleration(speed,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		counter_++;
	} 
	else if (counter_ < (durationBack + durationTurning) )
	{
		TransmitAcceleration(speed,m_tsArduinoTime);
		TransmitSteeringAngle(turningAngle,m_tsArduinoTime);
		counter_++;
	}
	else 
	{
		TransmitAcceleration(0.0f,m_tsArduinoTime);
		TransmitSteeringAngle(m_f32StraightAngle,m_tsArduinoTime);
		counter_ = 0;
		active_ = false;
		if(m_bShowLog)
		{
			LOG_ERROR(cString::Format("RunPullOverRightScript: Ended"));
		}
	}
}

tVoid cActionFilter::RunPullOverLeftScript()
{

}

tVoid cActionFilter::RunParallelParkingScript()
{

}
